## Problems based on Array

    ## Remove Duplicates from the sorted Array

        I/P : Arr[] = {10, 20, 20, 30, 30, 30, 30};
        O/P : Arr[] = {10 20, 30}

        I/P : Arr[] = {10, 10, 10};
        O/P : Arr[] = {10}

        ## Code for the problem:

            int Remove(int Arr[], int Len)
            {
                int Ind = 1;
                for(int i = 1; i < Len; i++)
                {
                    if(Arr[i] != Arr[Ind - 1])
                    {
                        Arr[Ind] = Arr[i];
                        Ind++;
                    }
                }
                return Ind;
            }

            Time Complexity : O(n)
            Auxillary space : O(1)

            

    ## Move all Zeros to the end
            
        I/P : Arr[] = {8, 5, 0, 10, 0, 20};
        O/P : Arr[] = {8, 5, 10 ,20, 0, 0}

        I/P : Arr[] = {0, 0, 0, 10, 0};
        O/P : Arr[] = {10, 0, 0, 0, 0}

        I/P : Arr[] = {10, 20};
        O/P : Arr[] = {10, 20}


        ## Code for the problem:
            
            void Move(int Arr[] ,int Len)
            {
                int Count = 0;
                for(int i = 0; i < Len; i++)
                {
                    if(Arr[i] != 0)
                    {
                        swap(Arr[i], Arr[Count]);
                        Count++;
                    }
                }
            }

            Time Complexity : O(n)
            Auxillary space : O(1)



    ## Left Rotate an array by one
            
        I/P : Arr[] = {1, 2, 3, 4, 5};
        O/P : Arr[] = {2, 3, 4 ,5, 1};

        I/P : Arr[] = {30, 5, 20};
        O/P : Arr[] = {5, 20, 30}
        

        ## Code for the problem
            
            void Rotate(int Arr[], int Len)
            {
                int Count = Arr[0];
                for(int i = 1; i < Len; i++)
                    Arr[i - 1] = Arr[i];
                Arr[Len - 1] = Count;
            }

            Time Complexity : Theta(n)
            Auxillary space : Theta(1)



    
    ## Left Rotate an Array by d

        I/P : Arr[] = {1, 2, 3, 4, 5}, d = 2;
        O/P : Arr[] = {3, 4, 5, 1, 2}

        I/P : Arr[] = {10, 5, 30, 15}, d = 3;
        O/P : Arr[] = {15, 10, 5, 30}


        ## Code for the problem

            
