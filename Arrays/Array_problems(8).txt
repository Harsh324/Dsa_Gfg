## Array Problems

    ## Prefix sum

        ** Given a fixed array and multiple queries of following,
        ** types on the array, how to efficiently perform queries.

        I/P : Arr[] = {2, 8, 3, 9, 6, 5, 4}
            Queries : getSum(0, 2), getSum(1, 3), getSum(2, 6)

        O/P : 13, 20, 27

        ** Naive approach could be for every query traverse array and return the sum
        ** But that will be O(n) Complexity for 1 query.
        ** We wll try Approach of O(1) Complexity for each query.


        ## Approach 1 :

            ** Get Prefix sum array in O(n), then using prefix sum array,
            ** each query can be handled in O(1)

            int Prefix_sum(int Arr[], int Len)
            {
                int Sum_Array[Len];
                Sum_Array[0] = Arr[0];
                for(int i = 1; i < Len; i++)
                {
                    Sum_Array[i] = Sum_Array[i - 1] + Arr[i];
                }
                return Sum_Array;
            }

            int GetSum(int Prefix_sum[], int Left, int Right)
            {
                if(Left != 0)
                    Prefix_sum[Right] - Prefix_sum[Left - 1];
                else
                    Prefix_sum[Right];
            }




    
    ## Given an array of integers, find if it has an equilibrium point.

        ** A point such that sum of element before it = sum of element after it is called equilibrium point.

        I/P : Arr[] = {3, 4, 8, -9, 20, 6}
        O/P : Yes

        I/P : Arr[] = {4, 2, -2}
        O/P : Yes

        I/P : Arr[] = {4, 2, 2}
        O/P : No


        ** Naive approach

        ## Approach 1 :

            bool checkEquilibrium(int arr[], int n)
            {
                for(int i  = 0; i < n; i++)
                {
                    int l_sum = 0, r_sum = 0;

                    for(int j = 0; j < i; j++)
                        l_sum += arr[j];

                    for(int j = i + 1; j < n; j++)
                        r_sum += arr[j];

                    if(l_sum == r_sum)
                        return true;
                }

                return false;
            }

            Time Complexity : O(n^2)


        
        ## Approach 2 :

            bool checkEquilibrium(int arr[], int n)
            {
                int sum = 0;

                for(int i = 0; i < n; i++)
                {
                    sum += arr[i];
                }

                int l_sum = 0;

                for(int i = 0; i < n; i++)
                {
                    if(l_sum == sum - arr[i])
                        return true;

                    l_sum += arr[i];

                    sum -= arr[i];
                }

                return false;
            }

            Time Complexity : O(n)
            Auxillary space : O(1)
   




    ## Given N Ranges, find the maximum appearing element in then Range.

    
        I/P : L[] = {1, 2, 5, 15}, R[] = {5,8 ,7, 18}
        O/P : 5

        ## Approach : 

            int maxOcc(int L[], int R[], int n)
            {	
                int arr[1000];
                
                memset(arr, 0, sizeof(arr));

                for(int i = 0; i < n; i++)
                {
                    arr[L[i]]++;

                    arr[R[i] + 1]--;
                }

                int maxm = arr[0], res = 0;

                for(int i = 1; i < 1000; i++)
                {
                    arr[i] += arr[i - 1];

                    if(maxm < arr[i])
                    {
                        maxm = arr[i];

                        res = i;
                    }
                }

                return res;
            }




    ## Some more problems based on array 

    1. Check if a given array can be divided into three parts with equal sum.
    2. Check if there is a subarray with zero Sum.
    3. Find the Longest Subarray with equal Zeroes and Ones.
    
   


