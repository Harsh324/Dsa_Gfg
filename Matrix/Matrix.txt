# Multidimensinal array in c++

    ## Important points 

        ** Elements are stored in row major order.

            C++ uses row major order.
            10, 20, 30, 40, 50, 60
            2000, 2004 , 2008, 2012, 2016, 2020

        ** Internal curly brckets are optional

            int Arr[3][2] = {10, 20, 30, 40, 50}

        ** Only the first dimension can be omitted
           when we initialize the array.

            we can only ommit the first dimension,
            you need to write all other dimensions.

            int Arr[][2] = {{1, 2} {3, 4}}
            int Arr[2][2] = {{1, 2}, {3, 4}, {5, 6}, {7, 8}}



    ## Example codes

        #include<iostream>

        using namespace std;

        int main()
        {
            int Arr[3][2] = {{10, 20}, {30, 40}, {50, 60}};

            for(int i = 0; i < 3; i++)
            {
                for(int j = 0; j < 2; j++)
                {
                    cout<<Arr[i][j] <<" ";
                }
            }

            return 0;
        }


    ## Variable sized array in C++

        ** Vraible sized array can be declared in c++

        #include <iostream>
        using namespace std;


        int main()
        {	
            int m = 3, n = 2;
            int arr[m][n];


            for(int i = 0; i < m; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    arr[i][j] = i + j;
                }
            }

            for(int i = 0; i < m; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    cout << arr[i][j] << " ";
                }
            }
            return 0;
        }



    ## Double pointer approach to get an array in c++

        ** A Double Pointer will point to an array of pointers
        ** Intresting thing is that we can have individual rows,
        of different sizes (Jagged arrays).

        ** Disadvantage is that it is not cache friendly.



        #include <iostream>
        using namespace std;


        int main()
        {	
            int m = 3, n = 2;
            int **arr;

            arr = new int* [m];

            for(int i = 0; i < m; i++)
                arr[i] = new int[n];

            for(int i = 0; i < m; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    arr[i][j] = 10;	

                    cout << arr[i][j] << " ";
                }
            }
            return 0;
        }


    ## Array of pointer approach

        ** Just create an array of pointers instead of,
            Double pointer and the rest of method is same.

        **  In Previous method the array of pointer was also,
            located on the heap (Dynamically allocated ).
            But in this method it is located on stack.



        #include <iostream>
        
        using namespace std;

        int main()
        {	
            int m = 3, n = 2;

            int *arr[m];

            for(int i = 0; i < m; i++)
                arr[i] = new int[n];

            for(int i = 0; i < 3; i++)
            {
                for(int j = 0; j < 2; j++)
                {
                    arr[i][j] = 10;	

                    cout << arr[i][j] << " ";
                }
            }

            return 0;
        }


    
    ## Using stl Vectors

        ** Not as cache friendly as simple 2-D Array

        ** Individual rows are of dynamic size 

        ** Easy to pass to a function.


        #include <iostream>
        #include <vector>
        using namespace std;

        int main()
        {	
            int m = 3, n = 2;

            vector<int> arr[m];

            for(int i = 0; i < m; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    arr[i].push_back(10);
                }
            }

            for(int i = 0; i < m; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    cout << arr[i][j] << " ";
                }
            }
            return 0;
        }



    ## Using Vector of Vectors

        ** Number of Rows can also be Dynamic.

        ** Remaining same with above method.

        #include <iostream>
        using namespace std;

        int main()
        {	
            int m = 3, n = 2;

            vector<vector<int>> arr;

            for(int i = 0; i < m; i++)
            {
                vector<int> v;

                for(int j = 0; j < n; j++)
                {
                    v.push_back(10);
                }

                arr.push_back(v);
            }

            for(int i = 0; i < arr.size(); i++)
            {
                for(int j = 0; j < arr[i].size(); j++)
                {
                    cout << arr[i][j] << " ";
                }
            }
            return 0;
        }