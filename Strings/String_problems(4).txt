## Constructing Longest proper prefix suffix Array

    ** Given a string we need to construct long proper,
       prefix suffix Array for the given string.

    ** Proper prefix of "abc"
        "", "a", "ab"

    ** Suffix of "abc"
        "", "c", "bc", "abc"



    I/P : Str = "ababc"
    O/P : LPS = [0, 0, 1, 2, 0]

    I/P : Str = "aaaa"
    O/P : LPS = [0, 1, 2, 3]

    I/P : Str = "abcd"
    O/P : LPS = [0, 0, 0, 0]


    ## Approach 1 :

        ** Naive Approach

        int longPropPreSuff(string str, int n)
        {
            for(int len=n-1;len>0;len--){
                bool flag=true;
                for(int i=0;i<len;i++)
                    if(str[i]!=str[n-len+i])
                        flag=false;
                        
                if(flag==true)
                    return len;
            }
            return 0;
        }

        void fillLPS(string str, int *lps){
            for(int i=0;i<str.length();i++){
                lps[i]=longPropPreSuff(str,i+1);
            }
        }

        Time Complexity : O(N^3)
        Auxillary space : O(1)


    ## Approach 2 :

        ** If LM = LPS[i - 1] and Str[Len] and Str[i],
           are same, then LPS[i] = Len + 1

        ** If Str[i] and Str[Len] are not same 

            a. if Len == 0, LPS[i] = 0

            b. Else, we recursively apply LPS[] Len = LPS[Len - 1],
               then compare Str[i] with Str[Len]

        void fillLPS(string str, int *lps)
        {
            int n=str.length(),len=0;
            lps[0]=0;
            int i=1;
            while(i<n){
                if(str[i]==str[len])
                {len++;lps[i]=len;i++;}
                else
                {if(len==0){lps[i]=0;i++;}
                    else{len=lps[len-1];}
                }
            }
        }
 

        Time Complexity : Theta(N)
        Auxillary space : O(M)

            ** N is length of Txt,
            ** M is legth of Pattern. 




## KMP String Matching

    ** Given a Text and a pattern we need to find out,
       whether the pattern is present in the text or not.

    I/P : Txt = "abcdefg", Patt = "bcd"
    O/P : 1

    I/P : Txt = "aaaaab", "aaaa"
    O/P : 0 1

    I/P : Txt = "abcd", Patt = "ba"
    O/P : Not found 

    ## Approach :

        void fillLPS(string str, int *lps)
        {
            int n=str.length(),len=0;
            lps[0]=0;
            int i=1;
            while(i<n){
                if(str[i]==str[len])
                {len++;lps[i]=len;i++;}
                else
                {if(len==0){lps[i]=0;i++;}
                    else{len=lps[len-1];}
                }
            }
        }
        void KMP(string pat,string txt)
        {
            int N=txt.length();
            int M=pat.length();
            int lps[M];
            fillLPS(pat,lps);
            int i=0,j=0;
            while(i<N){
                if(pat[j]==txt[i]){i++;j++;}

                if (j == M) { 
                    printf("Found pattern at index %d ", i - j); 
                    j = lps[j - 1]; 
                } 
                else if (i < N && pat[j] != txt[i]) { 
                    if (j == 0) 
                        i++;
                    else
                        j = lps[j - 1];  
                }
            }
        }

        Time Complexity : O(N) N is length of Text
        Auxillary space :






## Check for Rotation

    ** Given Two Strings we need to check whether,
       the two strings are rotations of each other or not.

    ** Basically we need to check whether S2 can be,
       obtained by roatatiing S1 any number of times.
       whether left or right.


    I/P : S1 = "ABCD", S2 = "CDAB"
    O/P : Yes

    I/P : S1 = "ABAAA", S2 = "BAAAA"
    O/P : Yes

    I/P : S1 = "ABAB", S = ""
    O/P : No 


    ## Approach : 

        bool areRotations(string s1,string s2)
        {
            if(s1.length()!=s2.length())return false;
            return ((s1+s1).find(s2)!=string::npos);
        }
        
         

        Time Complexity : Theta(N)
        Auxillary space : Theta(N)