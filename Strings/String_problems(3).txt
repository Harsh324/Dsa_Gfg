## Naive pattern Searching

    ** We need to find all the index where given pattern exists.

    I/P : Txt = "ABABABCD", Patt = "ABAB"
    O/P : 0 2 

    I/P : Txt = "ABCABCD", Patt = "ABCD"
    O/P : 3

    I/P : Txt = "AAAAA", Patt = "AAA"
    O/P : 0 1 2


    ## Approach 1: 

        void patSearchinng(string &txt,string &pat)
        {
            int m=pat.length();
            int n=txt.length();
            for(int i=0;i<=(n-m);i++){
                int j;
                for(j=0;j<m;j++)
                if(pat[j]!=txt[i+j])
                break;
                
                if(j==m)
                cout<<i<<" ";
            }
        }

        Time Complexity : O((N - M + 1) * M) 
        Auxillary space : O(1)




## Improved Naive Algorithm fo Distinct

    ** We are given a text and a pattern we need to,
       print all the occurences of the pattern present,
       in the text. also given that the pattern has all,
       distinct characters.


    I/P : Txt = "ABCABCDABCD", Patt = "ABCD"
    O/P : 3 7

    I/P : Txt = "GEEKSFORGEEKS", Patt = "EKS"
    O/P : 1 10

    I/P : Txt = "ABCAAAD", Patt = "ABD"
    O/P : 0 1 2


    ## Approach 1 :

        void patSearchinng(string &txt,string &pat)
        {
            int m=pat.length();
            int n=txt.length();
            for(int i=0;i<=(n-m);  )
            {
                int j;
                for(j=0;j<m;j++)
                {
                    if(pat[j]!=txt[i+j])
                        break;
                }
                
                if(j==m)
                    cout<<i<<" ";
                if(j==0)
                {
                    i++;
                }
                else
                {
                    i=(i+j);
                }
            }
        }

        Time Complexity : Theta(N)
        Auxillary space : 




## Rabin karp String searching Algorithm

    ** Given the text and the pattern we need to find,
       the all occurences of the pattern in the given text.

    I/P : Txt = "abdabcbabc", Patt = "abc"
    O/P : 3 7

    I/P : Txt = "a a a a a", Patt = "aaa"
    O/P : 0 1 2

    I/P : Txt = "abcd", Patt = "xyz"
    O/P : Not found


    ## Approach :

        ** Like the Naive Algorithm, slide the pattern one by one
        ** Compare hash values of pattern and current text window.
           if hash values match, then only compare individual characters.
        ** Match value is called spurious hit.
        ** Rolling hash 
            we can compute next hash using previous hash in constant time.
            Ti+1 = Ti + Txt[i + m] - Txt[i]
            M is length of pattern 

        ** Pattern with "god" will have same hash as pattern with "dog".
            Hence we will use improved hash to negate this issue.
            Hash("abc") = 1 x (d)^2 + 2 x (d)^1 + 2 x (d)^0





        #define d 256
        const int q=101;
        void RBSearch(string pat,string txt,int M, int N)
        {
            
            //Compute (d^(M-1))%q
            int h=1;
            for(int i=1;i<=M-1;i++)
                h=(h*d)%q;
            
            //Compute p and to
            int p=0,t=0;
            for(int i=0;i<M;i++){
                p=(p*d+pat[i])%q;
                t=(t*d+txt[i])%q;
            }
            
            for(int i=0;i<=(N-M);i++)
            {
                //Check for hit
                if(p==t)
                {
                    bool flag=true;
                    for(int j=0;j<M;j++)
                            if(txt[i+j]!=pat[j]){flag=false;break;}
                        if(flag==true)cout<<i<<" ";
                    }
                    //Compute ti+1 using ti
                    if(i<N-M)
                    {
                        t=((d*(t-txt[i]*h))+txt[i+M])%q;
                        if(t<0)t=t+q;
                    }
                }
            
        }


        ** In Worst case time Complexity is like Naive Approach
            for Ex : Txt = "AAAAA", Patt = "AAA"

        Time Complexity : O((N - M + 1) * M)
        Auxillary space:

        ** When we want to search multiple patterns in the text,
           then Rabin karp algorithm has better utility.


