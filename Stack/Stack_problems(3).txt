## Largest Rectangular Area in a Histogram

    ** Given an array every value of the array represents heights,
       of different bars in a histogram width of these bars are,
       same we need to find out largest rectangular area in this,
       histogram.



    I/P : Arr[] = {6, 2, 5, 4, 1, 5, 6}
    O/P : 10


    I/P  :Arr[] = {2, 5, 1}
    O/P : 5



    ## Approach 1 : 

        ** Naive Approach

        int getMaxArea(int arr[],int n)
        {
            int res=0;
            for(int i=0;i<n;i++){
                int curr=arr[i];
                for(int j=i-1;j>=0;j--){
                    if(arr[j]>=arr[i])curr+=arr[i];
                    else break;
                }
                for(int j=i+1;j<n;j++){
                    if(arr[j]>=arr[i])curr+=arr[i];
                    else break;
                }
                res=max(res,curr);
            }
            return res;
            
        }

        Time Complexity : O(N^2)


    ## Approach 2 : 

        int getMaxArea(int arr[],int n)
        {
            int res=0;
            int ps[n],ns[n];
            
            stack <int> s;
            s.push(0);
            for(int i=0;i<n;i++)
            {
                while(s.empty()==false && arr[s.top()]>=arr[i])
                    s.pop();
                int pse=s.empty()?-1:s.top();
                ps[i]=pse;
                s.push(i);
            }
            
            while(s.empty()==false)
            {
                s.pop();
            }
            
            s.push(n-1);
            for(int i=n-1;i>0;i--)
            {
                while(s.empty()==false && arr[s.top()]>=arr[i])
                    s.pop();
                int nse=s.empty()?n:s.top();
                ns[i]=nse;
                s.push(i);
            }
            
            for(int i=0;i<n;i++)
            {
                int curr=arr[i];
                curr+=(i-ps[i]-1)*arr[i];
                curr+=(ns[i]-i-1)*arr[i];
                res=max(res,curr);
            }
            return res;
            
        }

        Time Complexity : O(N)


    ## Approach 3 : 

        int getMaxArea(int arr[],int n)
        {
            stack <int> s;
            int res=0;
            int tp;
            int curr;
            
            for(int i=0;i<n;i++)
            {
                while(s.empty()==false && arr[s.top()]>=arr[i])
                {
                    tp=s.top();s.pop();
                    curr=arr[tp]* (s.empty() ? i : i - s.top() - 1);
                    res=max(res,curr);
                }
                s.push(i);
            }
            while(s.empty()==false)
            {
                tp=s.top();s.pop();
                curr=arr[tp]* (s.empty() ? n : n - s.top() - 1);
                res=max(res,curr);
            }
            
            return res;
            
        }

        Time Complexity : O(N) Only one traversal of the array.