## Implement K stacks in an array

    ## Approach : 

        struct kStacks 
        { 
            int *arr;   
            int *top;   
            int *next;  
            int cap, k; 
            int freeTop; 
            
            kStacks(int k1, int n){
                k = k1; cap = n; 
                arr = new int[cap]; 
                top = new int[k]; 
                next = new int[cap];
                
                for (int i = 0; i < k; i++) 
                    top[i] = -1; 
                
                freeTop = 0;
                for (int i=0; i<cap-1; i++) 
                    next[i] = i+1; 
                next[cap-1] = -1;
            } 
        
            bool isFull()   {  return (freeTop == -1);  } 
        
            bool isEmpty(int sn)  {  return (top[sn] == -1); }
            
            void push(int x, int sn) 
            { 
            if (isFull()) 
            { 
                cout << "\nStack Overflow\n"; 
                return; 
            } 
            
            int i = freeTop;     
            freeTop = next[i]; 
            next[i] = top[sn]; 
            top[sn] = i;
            arr[i] = x; 
            } 
        
            int pop(int sn) 
            { 
            if (isEmpty(sn)) 
            { 
                cout << "\nStack Underflow\n"; 
                return INT_MAX; 
            }
            
            int i = top[sn]; 
            top[sn] = next[i];   
            next[i] = freeTop; 
            freeTop = i; 
            return arr[i]; 
            }
            
        }; 


## Stock span Problem

    ** Given an array of integers and it represents the prices of,
       stocks on N consecutive days.
       Our task is to find the span of stocks on everyday.

    ** Span on a day is number of consecutive days including the,
       current day and days just before it which have values,
       equal or smaller.

    I/P : Arr[] = {13, 15, 12, 14, 16, 8, 6, 4, 10, }
    O/P : 1 2 1 2 5 1 1 1

    I/P : Arr[] = {10, 20, 30, 40}
    O/P : 1 2 3 4

    I/P : Arr[] = {40, 30, 20 ,10}
    O/P : 1 1 1 1

    I/P : Arr[] = {30, 20, 25, 28, 27,29}
    O/P : 1 1 2 3 1 5


    ## Approach 1 :

        ** Naive approach

        void printSpan(int arr[],int n)
        {
            for(int i=0;i<n;i++)
            {
                int span=1;
                for(int j=i-1;j>=0&&arr[j]<=arr[i];j--)
                    span++;
                cout<<span<<" ";
            }    
        }

        Time Complexity : O(N^2), when sorted array is given 

    
    ## Approach 2 :

        void printSpan(int arr[],int n)
        {
            stack<int> s ;
            s.push(0);
            cout<<1<<" ";
            for(int i=1;i<n;i++)
            {
                while(s.empty()==false && arr[s.top()]<=arr[i])
                {
                    s.pop();
                }
                int span=s.empty() ? i+1 : i-s.top();
                cout<<span<<" ";
                s.push(i);
            }
        }



