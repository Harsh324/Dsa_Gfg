## Previous Greater element

    ** Given an array of Distinct Integers, 
       Find closest(Position-wise) greater on left of every element.
       If there is no greater element on left then print -1.

    I/P : Arr[] = {15, 10, 18, 12, 4, 6, 2, 8}
    O/P : -1 15 -1 18 12 12 6 12

    I/P : Arr[] = {8, 10, 12}
    O/P : -1 -1 -1

    I/P : Arr[] = {12, 10, 8}
    O/P : -1 12 10



    ## Approach 1 :

        ** Naive approach

        void printPrevGreater(int arr[],int n)
        {
            for(int i=0;i<n;i++)
            {
                int j;
                for(j=i-1;j>=0;j--)
                {
                    if(arr[j]>arr[i])
                    {
                        cout<<arr[j]<<" ";
                        break;
                    }
                }
                if(j==-1)
                    cout<<-1<<" ";
            }
        }

        Time Complexity : O(N^2)

    
    ## Approach 2 : 

        ** Variation of Stock span Problem 

        void printPrevGreater(int arr[],int n)
        {
            stack<int>s;
            s.push(arr[0]);
            for(int i=0;i<n;i++){
                while(s.empty()==false && s.top()<=arr[i])
                    s.pop();
                int pg=s.empty()?-1:s.top();
                cout<<pg<<" ";
                s.push(arr[i]);
            }
        }

        Time Complexity : O(N)



## Next Greater element

    ** Given an array of integers, 
       Find NextGreater(Position-wise closest and on right side),
       for every array element.


    ** Variation of Stock span problem again


    I/P : Arr[] = {5, 15, 10, 8, 6, 12, 9 ,18}
    O/P : 15 18 12 12 12 18 18 -1

    I/P : Arr[] = {10, 15, 20 ,25}
    O/P : 15 20 25 -1

    I/P : Arr[] = {25, 20, 15, 10}
    O/P : -1 -1 -1 -1




    ## Approach 1 :

        ** Naive approach

        void nextGreater(int arr[],int n)
        {
            for(int i=0;i<n;i++){
                int j;
                for(j=i+1;j<n;j++){
                    if(arr[j]>arr[i]){
                        cout<<arr[j]<<" ";
                        break;
                    }
                }
                if(j==n)
                    cout<<-1<<" ";
            }
        }


        Time Complexity : O(N^2)

    
    ## Approach 2 :


        vector<int> nextGreater(int arr[],int n)
        {
            vector<int> v;
            stack<int>s;
            s.push(arr[n-1]); v.push_back(-1);
            for(int i=n-2;i>=0;i--){
                while(s.empty()==false && s.top()<=arr[i])
                    s.pop();
                int ng=s.empty()?-1:s.top();
                v.push_back(ng);
                s.push(arr[i]);
            }
            reverse(v.begin(),v.end());
            return v;
        }


        Time Complexity : O(N)
