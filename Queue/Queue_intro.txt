## Queue Data Structure

    ** Base on FIFO Principle whatever comess first goes out first.
    ** Item additon is known as Enqueue while item removal is,
       called Dequeue.

    ** Enqueue is done at the Back of the queue while Dequeue is,
       Done at the Front of the Queue.



    ## Application of Queue Data Structure

        ** Single Resource and Multiple consumer.
        ** Synchronization between slow and fast devices.
        ** In Operating System(Semaphore, FCFS Scheduling, spooling,
           buffer for devices like keyboard etc).
        ** In Computer Networks (Routers/Switches and mail Queues etc)
        ** Variation : Deque, Priority Queue and Doubly Ended Priority Queue.


    ## Implementation of Queue using Array

        ** Using Circular array all operations becomes O(1)

        ## Approach 1

            class Queue 
            { 
                public: 
                    int front, rear, size; 
                    unsigned capacity; 
                    int* array; 
            }; 

            
            Queue* createQueue(unsigned capacity) 
            { 
                Queue* queue = new Queue(); 
                queue->capacity = capacity; 
                queue->front = queue->size = 0; 

                
                queue->rear = capacity - 1; 
                queue->array = new int[( 
                    queue->capacity * sizeof(int))]; 
                return queue; 
            } 

            
            int isFull(Queue* queue) 
            { 
                return (queue->size == queue->capacity); 
            } 


            int isEmpty(Queue* queue) 
            { 
                return (queue->size == 0); 
            } 


            void enqueue(Queue* queue, int item) 
            { 
                if (isFull(queue)) 
                    return; 
                queue->rear = (queue->rear + 1) 
                            % queue->capacity; 
                queue->array[queue->rear] = item; 
                queue->size = queue->size + 1; 
                cout << item << " enqueued to queue\n"; 
            } 

            
            int dequeue(Queue* queue) 
            { 
                if (isEmpty(queue)) 
                    return INT_MIN; 
                int item = queue->array[queue->front]; 
                queue->front = (queue->front + 1) 
                            % queue->capacity; 
                queue->size = queue->size - 1; 
                return item; 
            } 


            int front(Queue* queue) 
            { 
                if (isEmpty(queue)) 
                    return INT_MIN; 
                return queue->array[queue->front]; 
            } 

            
            int rear(Queue* queue) 
            { 
                if (isEmpty(queue)) 
                    return INT_MIN; 
                return queue->array[queue->rear]; 
            }


    ## Implementation of Queue using Linked List

        ## approach 1 :

            struct QNode 
            { 
                int data; 
                QNode* next; 
                QNode(int d) 
                { 
                    data = d; 
                    next = NULL; 
                } 
            }; 

            struct Queue
            { 
                QNode *front, *rear; 
                Queue() 
                { 
                    front = rear = NULL; 
                } 

                void enQueue(int x) 
                { 

                    
                    QNode* temp = new QNode(x); 

                    
                    if (rear == NULL) { 
                        front = rear = temp; 
                        return; 
                    } 

                    
                    rear->next = temp; 
                    rear = temp; 
                } 

                
                void deQueue() 
                { 
                    
                    if (front == NULL) 
                        return; 

                
                    QNode* temp = front; 
                    front = front->next; 

                
                    if (front == NULL) 
                        rear = NULL; 

                    delete (temp); 
                } 
            }; 