## Implementation of Open Addressing

    Writing code for hashing using Open Addressing

    struct MyHash
    {
        int *arr;
        int cap,size;
        
        MyHash(int c)
        {
            cap=c;
            size=0;
            arr=new int[cap];
            for(int i=0;i<cap;i++)
                arr[i]=-1;
        }
        
        int hash(int key)
        {
            return key%cap;
        }

        bool insert(int key)
        {
            if(size==cap)
                return false;
            int i=hash(key);
            while(arr[i]!=-1 && arr[i]!=-2 && arr[i]!=key)
                i=(i+1)%cap;
            if(arr[i]==key)
                return false;
            else{
                arr[i]=key;
                size++;
                return true;
            }
        }
        bool search(int key)
        {
            int h=hash(key);
            int i=h;
            while(arr[i]!=-1){
                if(arr[i]==key)
                    return true;
                i=(i+1)%cap;
                if(i==h)
                    return false;
            }
            return false;
        }
        bool erase(int key)
        {   
            int h=hash(key);
            int i=h;
            while(arr[i]!=-1){
                if(arr[i]==key){
                    arr[i]=-2;
                    return true;
                }
                i=(i+1)%cap;
                if(i==h)
                    return false;
            }
            return false;
        }
    };



    ** If -1 and -2 are Input keys then there is problem,
    ** Languages use dummy node to overcome this problems.




## Camparison between open addressing and Chaining

    1. Chaining 

        ** Hash Table Never Fills
        
        ** Less Sensitive to Hash Functions

        ** Poor Cache Performance

        ** Extra Space for links

        ** Performance is (1 + Alpha) for unsuccessfull search


    2.  Open Addressing

        ** Table may become full and resizing becomes mandatory.
        
        ** Extra care Required for clustering.
        
        ** Cahche Friendly.
        
        ** Extra Space might be needed to achieve same Performance as chaining.

        ** Performance is (1 / (1 - Alpha)) for unsuccessfull search.






## Unordered set in C++ STL

    ** Set is based on RB Tree, while Unordered set is based on Hashing.

    ** Does not make order of any element.

    ** Find function in unordered_set 

        ** Finds if element is present or not, if present returns,
           the iterator , else returns Set.end().


    ** Count function in unordered_set

        ** Returns 1 if element is present else returns 0,
           if element is not present. 


    ** Search, Insert and Delete has Complexites as O(1) on Average.
    
    ** Size and Empty are also O(1).


    ** Code for Unordered set.

        int main()
        {
    
            unordered_set <int> s;
            s.insert(10);
            s.insert(5);
            s.insert(15);
            s.insert(20);
            for(int x: s)
                cout<<x<<" ";
                
            cout<<endl;
            for(auto it=s.begin();it!=s.end();it++)
                cout<<*it<<" ";
            cout<<endl;
            cout<<s.size()<<endl;
            s.clear();
            cout<<s.size()<<endl;
            
            s.insert(10);
            s.insert(5);
            s.insert(15);
            s.insert(20);
            cout<<s.size()<<endl;
            
            if(s.find(15)==s.end())
                cout<<"Not Found";
            else
                cout<<"Found "<<(*s.find(15));
            
            cout<<endl;   
            if(s.count(15))
                cout<<"Found";
            else
                cout<<"Not Found";
            cout<<endl;
            
            cout<<s.size()<<endl;
            s.erase(15);
            cout<<s.size()<<endl;
            auto it=s.find(10);
            s.erase(it);
            cout<<s.size()<<endl;
            
            s.erase(s.begin(),s.end());
                
            return 0;
        }


    


    ## Applications of unordered_set

        ** Implementation using Hashing, Whenever need of Search,
           Insert or Delete in Constant time use of unordered_set occurs.





