## Burn a Binary tree from a Leaf 

    ** We are given a Binary tree and a Leaf Node, 
       we need to find time to burn the Binary tre if we burn the,
       Given leaf at 0th second.

    ** we need to just find the farthest Node from the Given Leaf Node.



    ## Approach : 

        struct Node  
        { 
            int key; 
            struct Node *left; 
            struct Node *right; 
            Node(int k){
                key=k;
                left=right=NULL;
            }
        };

        int res=0;
        int burnTime(Node *root, int leaf, int &dist){
            if(root==NULL)return 0;
            if(root->key==leaf){dist=0;return 1;}
            int ldist=-1,rdist=-1;
            int lh=burnTime(root->left,leaf,ldist);
            int rh=burnTime(root->right,leaf,rdist);
            
            if(ldist!=-1){
            dist=ldist+1;
            res=max(res,dist+rh);
            }
            else if(rdist!=-1){
                dist=rdist+1;
                res=max(res,dist+lh);
            }
            return max(lh,rh)+1;
        }
        int main() {
            
            Node *root=new Node(10);
            root->left=new Node(20);
            root->right=new Node(30);
            root->left->left=new Node(40);
            root->left->right=new Node(50);
            root->left->left->left=new Node(60);
            root->left->left->left->left=new Node(70);
            int dist=-1;int leaf=50;
            burnTime(root,leaf,dist);
            cout<<res;
        }



## Count Node in a Complete Binary Tree

    ** We are Given a Binary tree we need to find the number of Nodes,
       this binary tree have.

    ** A Binary tree is called Complete Binary tree if it is,
       completely filled except possibly the last level.
       Last level is filled from left to Right.


    ## Approach 1 : 

        ** Naive Approach


        Time Complexity : Theta(N)
        Auxillary space : 


    ## Approach 2 : 



        Time Complexity : 