## Serialize and Deserialize a Binary Tree

    ** We are given Root of a Binary tree out task is to convert the,.
       binary tree in string or array in such a way we construct the tree,
       back.
    ** The process of converting the binary tree in string or array is,
       called serialization and the reverse process is called deserialization.



    ## Serialize approach : 


        ## Prorder Traversal based approach

        struct Node  
        { 
            int key; 
            struct Node *left; 
            struct Node *right; 
            Node(int k){
                key=k;
                left=right=NULL;
            }
        };

        const int EMPTY=-1;
        void serialize(Node *root, vector<int> &arr){
        if(root==NULL){
            arr.push_back(EMPTY);
            return;
        }
            arr.push_back(root->key);
            serialize(root->left,arr);
            serialize(root->right,arr);
        }  

        int main() {
            
            Node *root=new Node(10);
            root->left=new Node(20);
            
            vector<int> arr;
            serialize(root,arr);
            for (int x : arr) {
                cout<<x<<" ";
            }
        }

        Time Complexity : Theta(N)


    
    ## Deserialize approach : 


        struct Node  
        { 
            int key; 
            struct Node *left; 
            struct Node *right; 
            Node(int k){
                key=k;
                left=right=NULL;
            }
        };

        const int EMPTY=-1;
        void serialize(Node *root, vector<int> &arr){
        if(root==NULL){
            arr.push_back(EMPTY);
            return;
        }
            arr.push_back(root->key);
            serialize(root->left,arr);
            serialize(root->right,arr);
        }

        Node *deSerialize(vector<int> &arr, int &index){
            if(index==arr.size())
                return NULL;
            int val=arr[index];
            index++;
            if(val==EMPTY)return NULL;
            Node *root=new Node(val);
            root->left=deSerialize(arr,index);
            root->right=deSerialize(arr,index);
            return root;
        }

        void inorder(Node *root){
            if(root!=NULL){
                inorder(root->left);
                cout<<root->key<<" ";
                inorder(root->right);    
            }
        } 

        int main() {
            
            Node *root=new Node(10);
            root->left=new Node(20);
            
            vector<int> arr;
            serialize(root,arr);
            for (int x : arr) {
                cout<<x<<" ";
            }
            cout<<endl;
            int index=0;
            Node *root_new=deSerialize(arr,index);
            inorder(root_new);
        }

        Time Complexity : Theta(N)
