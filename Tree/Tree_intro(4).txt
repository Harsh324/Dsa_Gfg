## Children Sum Property

    ** We are Given a binary Tree we need to check whether this,
       binary tree follows children sum property or not.

    ** Children Sum Property is a property in which the sum of,
       values of the left child and right child should be equal,
       to the value of their node if both children are present.
       Else if only one child is present then the value of the,
       child should be equal to its node value.

    ** A tree with Single Node, Null Tree follows Children Sum Property


    ## Approach : 

        struct Node  
        { 
            int key; 
            struct Node *left; 
            struct Node *right; 
            Node(int k){
                key=k;
                left=right=NULL;
            }
        };

        bool isCSum(Node *root){
            if(root==NULL)
                return true;
            if(root->left==NULL && root->right==NULL)
                return true;
            int sum=0;
            if(root->left!=NULL)sum+=root->left->key;
            if(root->right!=NULL)sum+=root->right->key;
            
            return (root->key==sum && isCSum(root->left) && isCSum(root->right));
        }

        int main() {
            
            Node *root=new Node(20);
            root->left=new Node(8);
            root->right=new Node(12);
            root->right->left=new Node(3);
            root->right->right=new Node(9);
            
            cout<<isCSum(root);
        }

        Time Complexity : O(N)
        Auxillary space : O(H) ,H is Height of Binary tree.




## Check for Balanced Tree

    ** We are given a Binary tree we need to check whether,
       this binary tree is Hieght balanced or not.

    ** Height balanced means Difference between height of Left Subtree,
       and Right Subtree should not be more than one for every Node.


    ## Approach 1 : 

        struct Node  
        { 
            int key; 
            struct Node *left; 
            struct Node *right; 
            Node(int k){
                key=k;
                left=right=NULL;
            }
        };

        int height(Node *root){
            if(root==NULL)
                return 0;
            else
                return (1+max(height(root->left),height(root->right)));
        }

        bool isBalanced(Node *root){
            if(root==NULL)
                return true;
            int lh=height(root->left);
            int rh=height(root->right);
            return (abs(lh-rh)<=1 && isBalanced(root->left) && isBalanced(root->right));
        }

        int main() {
            
            Node *root=new Node(10);
            root->left=new Node(5);
            root->right=new Node(30);
            root->right->left=new Node(15);
            root->right->right=new Node(20);
            
            cout<<isBalanced(root);
        }

        Time Complexity : O(N^2)



    ## Approach 2 :

        struct Node  
        { 
            int key; 
            struct Node *left; 
            struct Node *right; 
            Node(int k){
                key=k;
                left=right=NULL;
            }
        };

        int isBalanced(Node *root){
            if(root==NULL)
                return 0;
            int lh=isBalanced(root->left);
            if(lh==-1)return -1;
            int rh=isBalanced(root->right);
            if(rh==-1)return -1;
            
            if(abs(lh-rh)>1)
                return -1; 
            else
                return max(lh,rh)+1;
        }

        int main() {
            
            Node *root=new Node(10);
            root->left=new Node(5);
            root->right=new Node(30);
            root->right->left=new Node(15);
            root->right->right=new Node(20);
            
            if(isBalanced(root))
                cout<<"Balanced";
            else
                cout<<"Not Balanced";
        }

        Time Complexity : O(N)