## Insert at Given Position in Singly Linked List

    I/P : [10] -> [30] -> [50] -> [70] -> NULL ,  Pos = 2, Data = 20
    O/P : [10] -> [20] -> [30] -> [50] -> [70] -> NULL

    I/P : [5] -> [15] -> [25] -> [35] -> NULL, Pos = 5, Dta = 10
    O/P : [5] -> [15] -> [25] -> [35] -> [10] -> NULL


    ## Approach : 

        Node InsertPair(Node Head, int Pos, int Data)
        {
            Node Temp = new Node(Data);
            if(Pos == 1)
            {
                Temp.Next = Head;
                return Temp;
            }
            Node Curr = Head;
            for(int i = 1; i <= Pos - 2; && Curr != NULL; i++)
                Curr = Curr.Next;

            if(Curr == NULL)
                return Head;

            Temp.Next = Curr.Next;
            Curr.Next = Temp;
            return Head;
        }


        Time Complexity : 
        Auxillary space : 




## Search in Linked List

    ** Given the Head of Singly Linked List and also given,
       a key to be Searched in the Linked List.we need to return,
       the position of the key in the List else return -1.



    ## Approach 1 :

        ** Iterative Approach

        int search(Node * head, int x)
        {
            int pos = 1;
            Node *curr = head;
            while(curr != NULL)
            {
                if(curr->data == x)
                    return pos;
                else
                {
                    pos++;
                    curr = curr->next;
                }
            }
            return -1;
        }

        Time Complexity : O(N)
        Auxillary space : O(N)




    ## Approach 2 :

        ** Recursive Approach

        int search(Node * head, int x)
        {
            if(head == NULL)
                return -1;
            if(head->data == x)
                return 1;
            else
            {
                int res = search(head->next,x);
                if(res==-1)
                    return -1;

                else 
                    return res+1;
            }
        }

        Time Complexity : O(N)
        Auxillary space : O(N)





## Doubly Linked List

    ## Approach

        struct Node
        {
            int data;
            Node* prev;
            Node* next;
            Node(int d)
            {
                data=d;
                prev=NULL;
                next=NULL;
            }
        };

        void printlist(Node *head)
        {
            Node *curr=head;
            while(curr!=NULL)
            {
                cout<<curr->data<<" ";
                curr=curr->next;
            }
            cout<<endl;
        }

        int main() 
        { 
            Node *head=new Node(10);
            Node *temp1=new Node(20);
            Node *temp2=new Node(30);
            head->next=temp1;
            temp1->prev=head;
            temp1->next=temp2;
            temp2->prev=temp1;
            printlist(head);
            return 0;
        } 





## Singly vs Doubly Linked List

    ** Advantages and disadvantages of Doubly,
       linked List over Singly Linked List.


    ** Advantages

        * Can be Traversed in both Directions.
        * a Given Node can be deleted in O(1),
          time with given reference/pointer to it.

        * Insert/Delete from the Both Ends in,
          O(1) by maintaining Tail.


    ** Disadvantages

        * Extra space for prev

        * code becomes more complex



## Insert at Beginning of Doubly Linked List

    I/P : [10] -> [20] -> [30], Data = 5
    O/P : [5] -> [10] -> [20] -> [30]

    I/P : Head = NULL, Data = 5
    O/P : [5]



    ## Approach : 

        Node *insertBegin(Node *head,int data)
        {
            Node *temp = new Node(data);
            temp->next = head;
            if(head!=NULL)
                head->prev = temp;
            return temp;
        }

        Time Complexity : O(1)
        Auxillary space : O(1)




## Insert at the End of Doubly Linked List

    I/P : [10] -> [20] -> [30] , Data = 40
    O/P : [10] -> [20] -> [30] -> [40]

    I/P : Head = NULL, Data = 40
    O/P : [40]

    ## Approach : 


        Node *insertEnd(Node *head,int data)
        {
            Node *temp = new Node(data);
            if(head==NULL)
                return temp;
            Node *curr=head;

            while(curr->next!=NULL)
            {
                curr=curr->next;
            }

            curr->next=temp;
            
            temp->prev=curr;
            return head;
        }



        Time Complexity : 
        Auxillary space :







