## Reverse a Linked List (Recursive method)

    I/P : [10] -> [20] -> [30] -> [40]
    O/P : [40] -> [30] -> [20] -> [10]


    I/P : [10] -> [20] -> [30]
    O/P : [30] -> [20] -> [10]

    I/P : [10]
    O/p : [10]


    ## Approach 1 :


        Node *recRevL(Node *head)
        {
            if(head == NULL || head->next == NULL)
                return head;

            Node *rest_head = recRevL(head->next);
            Node *rest_tail = head->next;
            rest_tail->next = head;
            head->next = NULL;

            return rest_head;
        }

        Time Complexity : 
        Auxillary space : 


    ## Approach 2 :


        Node *recRevL(Node *curr,Node *prev)
        {
            if(curr == NULL)
                return prev;
            Node *next = curr->next;
            curr->next = prev;
            return recRevL(next,curr);
        }



        Time Complexity : 
        Auxillary space : 





## Remove Duplicates from a sorted Linked List


    ** Given a sorted Linked List we need to remove the duplicates from it.


    I/P : [10] -> [20] -> [20] -> [30] -> [30] -> [30]
    O/P : [10] -> [20] -> [30]

    I/P : [5] -> [10] -> [15] -> [20]
    O/P : [5] -> [10] -> [15] -> [20]


    ## Approach 1 :

        void RemoveDups(Node* Head)
        {
            Node* Curr = Head;
            while(Curr != NULL && Curr->Next != NULL)
            {
                if(Curr->data == Curr->Next ->data)
                {
                    Node* Temp = Curr->Next;
                    Curr->Next = Curr->Next->Next;
                    delete(Temp);
                }
                else
                    Curr = Curr->Next;
            }
        }






## Reverse a Linked List in Groups

    ** Given a Singly Linked List and the value K. we,
       need to Reverse the List in group of size K.


    I/P : [10] -> [20] -> [30] -> [40] -> [50] -> [60]
    O/P : [30] -> [20] -> [10] -> [60] -> [50] -> [40]
    
    
    I/P : [10] -> [20] -> [30] -> [40] -> [50]
    O/P : [30] -> [20] -> [10] -> [50] -> [40]



    ## Approach 1 :

        Node *reverseK(Node *head,int k)
        {
            Node *curr = head, *next = NULL, *prev = NULL;
            int count = 0;
            while(curr != NULL && count < k)
            {
                next = curr->next;
                curr->next = prev;
                prev = curr;
                curr = next;
                count++;
            }
            if(next != NULL)
            {
                Node *rest_head = reverseK(next,k);
                head->next = rest_head;
            }
            return prev;
        }


        Time Complexity : O(N)
        Auxillary space : O(N / K)



    ## Approach 2 :

        Node *reverseK(Node *head,int k)
        {
            Node *curr = head, *prevFirst = NULL;
            bool isFirstPass = true;
            while(curr != NULL)
            {
                Node *first = curr, *prev = NULL;
                int count = 0;
                while(curr != NULL && count < k)
                {
                    Node *next = curr->next;
                    curr->next = prev;
                    prev = curr;
                    curr = next;
                    count++;
                }

                if(isFirstPass)
                {
                    head=prev;
                    isFirstPass=false;
                }

                else
                {
                    prevFirst->next = prev;
                }
                prevFirst = first;
            }
            return head;
        }


        Time Complexity : Theta(N)
        Auxillary space : Theta(1)  



     






        