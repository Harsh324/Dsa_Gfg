## Linked List

    ** Linked list is sequential and linear data structure,
       Memory location need not to be on contigous locations.


    ## Problems with an array

        1. Either the Size is fixed and pre-allocated,
           (in Both Fixed and Varibale Sized ), or the worst,
           case insertion at the End is Theta(N).

        2. Insertion  in the middle(or beginning) is costly.

        3. Deletion in the middle(or Beginning) is costly.

        4. Implementation of Data Structures like queue and,
           deque are complex with arrays.



        ** How to Implement Round Robin Scheduling ?
            

        ** Given a sequence of items, whenever we see an item x,
           in the sequence, we need to replace it with 5 instances,
           of another item Y.



        ** We have multiple sorted sequences and we need to merge,
           them frequently.




   ## The Idea is to drop the contigous memory requirements,
      so that insertions, deletions can efficiently at the middle also.
      and no need to preallocate the extra space.



   ## Simple Linked List Implementation in c++

      struct Node
      {
         int data;
         Node* next;
         Node(int x){
            data=x;
            next=NULL;
         }
      };

      int main() 
      { 
         Node *head=new Node(10);
         Node *temp1=new Node(20);
         Node *temp2=new Node(30);
         head->next=temp1;
         temp1->next=temp2;
         cout<<head->data<<"-->"<<temp1->data<<"-->"<<temp2->data;
         return 0;
      }




   ## Traversing a Singly Linked List

      I/P : [10]  ->  [20]  ->  [30]  ->  [40]
      O/P : 10 20 30 40

      I/P : [10]  -> NULL
      O/P : 10

      I/P : NULL
      O/P : 


      ## Approach 1 :

         ** Iterative Approach

         struct Node
         {
            int data;
            Node* next;
            Node(int x)
            {
               data=x;
               next=NULL;
            }
         };

         void printlist(Node *head)
         {
            Node *curr=head;
            while(curr!=NULL)
            {
               cout<<curr->data<<" ";
               curr=curr->next;
            }
         }

         Time Complexity : O(N)
         Auxillary space : O(1)


      ## Approach 2 :

         ** Recursive Approach

         struct Node
         {
            int data;
            Node* next;
            Node(int x)
            {
               data=x;
               next=NULL;
            }
         };

         void printlist(Node *head)
         {
            if(head == NULL)
               return ;
            cout<<head->data<<" ";
            printlist(head->next);
         }

         Time Complexity : O(N), N is number of Nodes
         Auxillary space : O(N)





   ## Insert at the Beginning of Singly Linked list.

      I/P : [10] -> [20] -> [30] -> NULL  , X = 5 at pos = 1
      O/P : [5] - > [10] -> [20] -> [30] -> NULL

      I/P : [10] -> NULL, X = 5 at Pos = 1
      O/P : [5] -> [10] -> NULL


      ## Approach 1 :

         Node *insertBegin(Node *head,int x)
         {
            Node *temp = new Node(x);
            temp->next=head;
            return temp;
            
         }

         Time Complexity : O(1)
         Auxillary space : O(1)


      

   ## Insert at the End of Linked List

      I/P : [10] -> [20] -> [30] -> NULL   , X = 40
      O/P : [10] -> [20] -> [30] -> [40] -> NULL

      I/P : NULL, X = 10
      O/P : [10] -> NULL 


      ## Approach 1: 

         Node *insertEnd(Node *head,int x)
         {
            Node *temp=new Node(x);

            if(head==NULL)
               return temp;

            Node *curr=head;
            while(curr->next!=NULL)
            {
               curr=curr->next;
            }

            curr->next=temp;
            return head;
            
         }

         Time Complexity : O(1)
         Auxillary space : O(1)



   ## Delete First Node of singly Linked List

      I/P : [10] -> [20] -> [30] -> [40] -> NULL
      O/P : [20] -> [30] -> [40] -> NULL

      I/P : [10] -> NULL
      O/P : Head = NULL

      I/P : Head = NULL
      O/P : Head = NULL;


      ## Approach 1 :


         Node *delHead(Node *head)
         {
            if(head==NULL)
               return NULL;

            else
            {
               Node *temp = head->next;
               delete(head);
               return temp;
            }
         }


         Time Complexity : O(1)
         Auxillary space : O(1)



   ## Delete 


      I/P : [10] -> [20] -> [30] -> [40] -> NULL
      O/P : [20] -> [30] -> [40] -> NULL

      I/P : [10] -> NULL
      O/P : Head = NULL

      I/P : Head = NULL
      O/P : Head = NULL;


      ## Approach 1 :

         Node *delTail(Node *head)
         {
            if(head==NULL)
               return NULL;

            if(head->next==NULL)
            {
               delete head;
               return NULL;
            }

            Node *curr=head;

            while(curr->next->next!=NULL)
               curr=curr->next;

            delete(curr->next);
            curr->next=NULL;
            return head;
         }

         Time Complexity : Theta(N), N is number of nodes.
         Auxillary space : O(1)