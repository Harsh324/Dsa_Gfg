## Middle of a Linked List


    ** Given a singly linked list we need to find the,
       middle of it.



    I/P : [10] -> [5] -> [20] -> [15] -> [25]
    O/P : 20


    I/P : [10] -> [5] -> [20] -> [15] -> [25] -> [30]
    O/P : 15

    
    I/P : [10]
    O/P : 10


    I/P : NULL 
    O/P : NULL



    ## Approach 1 :

        ** Naive Approach


        void printMiddle(Node * head)
        {
            if(head == NULL)
                return;
            int count = 0;
            Node *curr;
            for(curr = head; curr != NULL; curr = curr->next)
                count++;
            curr=head;

            for(int i = 0; i < count/2; i++)
                curr=curr->next;
            cout<<curr->data;
        }



    ## Approach 2 :


        void printMiddle(Node * head)
        {
            if(head == NULL)
                return;
            Node *slow = head,*fast = head;
            while(fast != NULL && fast->next != NULL)
            {
                slow=slow->next;
                fast=fast->next->next;
            }
            cout<<slow->data;
        }



## Find Nth Node from end of Linked List

    ** Given a linked list and a Number N we need to,
       print the Nth Node from End of the Linked List.

    I/P : [10] -> [20] -> [30] -> [40] -> [50], N = 2
    O/P : 40


    I/P : [10] -> [20] -> [30], N = 3
    O/P : 10


    I/P : [10] -> [20], N = 3
    O/P : None


    ## Approach 1:

        ** Based on Length of Linked List

        void printNthFromEnd(Node * head,int n)
        {
            int len = 0;
            for(Node *curr = head; curr != NULL; curr = curr->next)
                len++;
            if(len < n)
                return;
            Node *curr = head;
            for(int i = 1; i<len-n+1; i++)
                curr = curr->next;
            cout<<(curr->data)<<" ";
        }


        Timr Complexity : O(N)



    ## Approach 2 :

        ** Take Two Pointers of reference 
        ** Move 'First' N positions ahead
        ** Start 'Second' Pointer from head
        ** Move Both 'First' and 'Second' at Same speed.
           When 'First' reahes NULL, 'Second' reaches the,
           required Node.



        
        void printNthFromEnd(Node * head,int n)
        {
            if(head == NULL)
                return;
            Node *first = head;
            for(int i = 0; i<n; i++)
            {
                if(first == NULL)
                    return;
                first = first->next;
            }

            Node *second = head;
            while(first != NULL)
            {
                second = second->next;
                first = first->next;
            }
            cout<<(second->data);
        }

        Time Complexity : O(N)



## Reverse a Linked List

    ** We are Given a Linked List we need to reverse the,
       Linked List.

    I/P : [10] -> [20] -> [30] -> [40]
    O/P : [40] -> [30] -> [20] -> [10]


    I/P : [10] -> [20] -> [30]
    O/P : [30] -> [20] -> [10]

    I/P : [10]
    O/p : [10]


    ## Approach 1 :


        Node *revList(Node *head)
        {
            vector<int> arr;

            for(Node *curr = head; curr != NULL; curr = curr->next)
            {
                arr.push_back(curr->data);
            }
            for(Node *curr = head; curr != NULL; curr = curr->next)
            {
                curr->data = arr.back();
                arr.pop_back();
            }
            return head;
        }

        Time Complexity : O(N)
        Auxillary space : O(N)


    ## Approach 2 :


        Node *reverse(Node *head)
        {
            Node *curr = head;
            Node *prev = NULL;
            while(curr != NULL)
            {
                Node *next = curr->next;
                curr->next = prev;
                prev = curr;
                curr = next;
            }
            return prev;
        }


        Time Complexity : O(N)
        Auxillary space : O(1)





