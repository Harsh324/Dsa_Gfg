## Binary search tree


                            Array               Array           Linked List         BST            Hash Table
                          (unsorted)           (sorted)                          (Balanced)     

    Search                   O(N)              O(Log N)            O(N)          O(Log N)           O(1)   


    Insert                   O(1)              O(N)                O(1)          O(Log N)           O(1)


    Delete                   O(N)              O(N)                O(N)          O(Log N)           O(1)


    Find Closest             O(N)              O(Log N)            O(N)          O(Log N)           O(N)


    Sorted Traversal         O(NLog N)         O(N)                O(NLog N)     O(N)               O(NLog N)
                                                                (O(N) in case
                                                                 of sorted 
                                                                 Lnked List)





    ** Only for the case of Balanced Binary serach tree we get,
       logarithmic time complexity.



## Binary search tree 

    ** For every node keys in left are smaller and keys in right,
       side are greater.

    ** All keys are typically considered as distinct.

    ** It is a linked data structure as like linked list.

    ** Not cache friendly.

    ** In C++ STL Map, set, Multimap and Multiset Implement,
       Binary search tree. Particulary self balancing. 

    ** Most Opertaion are O(H), H is Height of BST.

    ** If BST is blanaced then H -> Log N;




    ## Search in a BST 


        ## Approach 1 :

            ** Recursive

            bool search(Node *root, int x)
            {
                if(root==NULL)
                    return false;
                if(root->key==x)
                    return true;
                else if(root->key>x){
                    return search(root->left,x);
                }else{
                    return search(root->right,x);
                }
            }

            Time complexity : O(H), H could be N if tree is schewed.
            Auxillary Space : O(H)


        
        ## Approach 2 :

        
            bool search(Node *root, int x)
            {
                while(root!=NULL){
                    if(root->key==x)
                        return true;
                    else if(root->key<x)
                        root=root->right;
                    else
                        root=root->left;
                }
                return false;
            } 


            Time complexity : O(H)
            Auxillary space : O(1)


    
    ## Insert in BST

        ** We alsway Insert Node at bottom, only root changes,
           if Root is Empty.


        
        ## Approach 1 : 


            Node *insert(Node *root, int x)
            {
                if(root==NULL)
                    return new Node(x);
                if(root->key<x)
                    root->right=insert(root->right,x);
                else if(root->key>x)
                    root->left=insert(root->left,x);
                return root;
            } 


            Time complexity : O(H)
            Auxillary space : O(H)


        ## Approach 2 :


            Node *insert(Node *root, int x)
            {
                Node *temp=new Node(x);
                Node *parent=NULL,*curr=root;
                while(curr!=NULL){
                    parent=curr;
                    if(curr->key>x)
                        curr=curr->left;
                    else if(curr->key<x)
                        curr=curr->right;
                    else
                        return root;
                }
                if(parent==NULL)
                    return temp;
                if(parent->key>x)
                    parent->left=temp;
                else
                    parent->right=temp;
                return root;
            } 

            Time complexity : O(H)
            Auxillary space : O(1)





    