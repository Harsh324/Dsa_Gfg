## Allocate Minimum No of pages

    ** Given number of pages in N Books, given number of students,
    students read contigous books

    I/P : Arr[] = {10, 20, 30, 40}, K = 2
    O/P : 60

    I/P : Arr[] = {10, 20, 30}, K = 1
    O/P : 60

    I/P : Arr[] = {10, 5, 30, 1, 2,5, 10, 10}, K = 3
    O/P : 30

    ** Naive approach

    ## Approach 1:

        int sum(int arr[],int b, int e)
        {
            int s=0;
            for(int i=b;i<=e;i++)
                s+=arr[i];
            return s;
        }

        int minPages(int arr[],int n, int k)
        {
            if(k==1)
                return sum(arr,0,n-1);
            if(n==1)
                return arr[0];
            int res=INT_MAX;
            for(int i=1;i<n;i++){
                res=min(res,max(minPages(arr,i,k-1),sum(arr,i,n-1)));
            }
            return res;
        }

        Time Complexity : Exponential




    ** Efficient approach

    ## Approach 2:

        bool isFeasible(int arr[],int n,int k, int ans)
        {
            int req=1,sum=0;
            for(int i=0;i<n;i++)
            {
                if(sum+arr[i]>ans){
                    req++;
                    sum=arr[i];
                }
                else{
                    sum+=arr[i];
                }
            }
            return (req<=k);
        }

        int minPages(int arr[],int n, int k)
        {
            int sum=0,mx=0;
            for(int i=0;i<n;i++)
            {
                sum+=arr[i];
                mx=max(mx,arr[i]);
            }
            int low=mx,high=sum,res=0;
            
            while(low<=high){
                int mid=(low+high)/2;
                if(isFeasible(arr,n,k,mid)){
                    res=mid;
                    high=mid-1;
                }else{
                    low=mid+1;
                }
            }
            return res;
        }

        Time Complexity : O(N * Log Sum)

