## Search in an Infinite sorted array

    ** Unbounded binary search algorithm


    **we are given an infinte size sorted array and,
    an element to be searched, if present return index,
    return -1.

    I/P : Arr[] = {1, 10, 15, 20, 40, 80, 90, 100, 120, ...}, X = 100
    O/P : 7

    I/P : Arr[] = {20, 40, 100, 300 ,....}, X = 50
    O/P : -1


    ** Naive solution is linear traversal

    ## Approach 1:

        int Search(int Arr[], int X)
        {
            int i = 0;
            while(true)
            {
                if(Arr[i] == X)
                    return i;
                if(Arr[i] > X)
                    return -1;
                i++;
            }
        }

        Time Complexity : O(Position)
        Auxillary space: O(1)


    ## Approach 2:

        int Search(int Arr[], int X)
        {
            if(Arr[0] == X)
                return 0;
            int i = 1;
            while(Arr[i] < X)
                i = i * 2;
            if(Arr[i] == X)
                return i;

            return BinarySearch(Arr, X, i / 2 + 1, i - 1);
        }

        Time Complexity : O(log(Position))
        Auxillary space : O(1)






## Search in a sorted Rotated array

    **we are given sorted and Rotated array and,
    an element to be searched, if present return index,
    return -1.


    I/P : Arr[] = {10, 20, 30, 40, 50, 8, 9}, X = 30
    O/P : 2

    I/P : Arr[] = {100, 200, 300 ,10, 20}, X = 40
    O/P : -1

    ** Naive Approach is linear search

    ** Efficient approach using binary search

    ## Approach 1 :

        int Search(int Arr[], int Len, int X)
        {
            int Low = 0, High = Len - 1;
            while(Low <= High)
            {
                int Mid = (Low + High) / 2;
                if(Arr[Mid] == X)
                    return Mid;

                if(Arr[Low] < Arr[Mid])
                {
                    if(X >= Arr[Low] && X < Arr[Mid])
                        High = Mid - 1;
                    else:
                        Low = Mid + 1;
                }
                else
                {
                    if(X > Arr[Mid] && X <= Arr[High])
                        Low = Mid + 1;
                    else
                        High = Mid - 1;
                }
            }
            return -1;
        }

        Time Complexity : O(Log N) 
        Auxillary space : O(1)







## Find a peak element

    ** Given an unsorted array we need to find peak element
    ** if element is not smaller than its neighbours,
    its is a peak element.

    I/P : Arr[] = {5, 10, 20, 15, 7}
    O/P : 20

    I/P : Arr[] = {10, 20, 15, 5, 23, 90, 67}
    O/P : 20 or 90

    I/P : Arr[] = {80, 70, 90}
    O/P : 80


    ** Naive approach

    ## Approach 1:

        int get_Peak(int Arr[], int Len)
        {
            if(Len == 1)
                return Arr[0];
            if(Arr[0] >= Arr[i])
                return Arr[0];

            if(Arr[Len - 1] >= Arr[Len - 2])
                return Arr[Len - 1];

            for(int i = 0; i < Len - 1; i++)
            {
                if(Arr[i] >= Arr[i - 1] && Arr[i] <= Arr[i + 1])
                    return Arr[i];
            }
        }

        Time Complexity : O(N)
        Auxillary space : O(1)


    ** Efficient Approach using binary search

    ## Approach 2:

        int getPeak(int arr[], int n)
        {
            int low = 0, high = n - 1;

                while(low <= high)
                {
                    int mid = (low + high) / 2;

                    if((mid == 0 || arr[mid - 1] <= arr[mid]) &&
                        (mid == n - 1 || arr[mid + 1] <= arr[mid]))
                        return mid;
                    if(mid > 0 && arr[mid - 1] >= arr[mid])
                        high = mid -1;
                    else
                        low = mid + 1;
                }
            return -1;
        }

        Time Complexity : O(Log N)
        Auxillary space : O(1) 




