## Count Occurences in a sorted array

    ** Given a sorted array which might contain duplicates
       also given a number X, tak is to find number of 
       occurences of X


    I/P : Arr[] = {10, 20, 20, 20, 30, 30}, X = 20;
    O/P : 3

    I/P : Arr[] = {10, 10, 10, 10, 10}, X = 10;
    O/P : 5

    I/P : Arr[] = {5, 8, 10}, X = 7;
    O/P : 0

    

    ** Naive appproach could be traversing array linearly
       and counting all the occurence of X.

    Approach 1 :


    ** Better solution
    ** We will be using two functions discussed in "Searching_problems.txt" file


    Approach 2 :

        int Count_Occurence(int Arr[], int int Len, int X)
        {
            int First = First_Ind(Arr, Len, X)

            if(First == -1)
                return 0;
            
            else
                return(Last_Ind(Arr, Len, X) - First + 1);
        }




## Count 1s in a sorted array

    ** We are given a sorted binary array our task is to,
    count how many ones in te array.

    I/P : Arr[] = {0, 0, 0, 1, 1, 1, 1}
    O/P : 4

    I/P : Arr[] = {1, 1, 1, 1, 1}
    O/P : 5

    I/P : Arr[] = {0, 0, 0, 0}
    O/P : 0


    ** We will get first occurence using binary Searching_problems

    ## Approach 1:

        int Count_Ones(int Arr[], int Len)
        {
            int Low = 0, High = N - 1;
            while(Low <= High)
            {
                int Mid = (Low + High) / 2;
                if(Arr[Mid] == 0)
                    Low = Mid + 1;
                else
                {
                    if(Mid == 0 || Arr[Mid - 1] != Arr[Mid])
                        return (Len - Mid);
                    else:
                        High = Mid - 1;
                }
            }
            return 0;
        }

        Time Complexity : O(Log N)
        Auxillary space : O(1)




## Square Root problem

    ** Give an integer , we need to find the floor of,
    square root of the integer.

    ** Naive appproach

    ## Approach 1:

        int Root(int Num)
        {
            int Val = 1;
            while(Val * Val <= Num)
                Val++;
            return Val - 1;
        }

        Time Complexity : Theta(X^(1 / 2))


    ## Approach 2:

        int Root(int Num)
        {
            int Low = 1 ,High = Num, Ans = -1;
            while(Low <= High)
            {
                int Mid = (Low + High) / 2;
                int  Sqr = Mid * Mid;
                if(Sqr == Num)
                    return Mid;
                else if(Sqr > Num)
                    High = Mid - 1;
                else
                {
                    Low = Mid + 1;
                    Ans = Mid;
                }

            }
            return Ans;
        }


