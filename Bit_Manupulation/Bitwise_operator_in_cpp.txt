# Bitwise operatoe in c++

    1 . AND : &  -> Both input if 1 then output 1
    2 . OR  : |  -> Any input if 1 then output is 1.
    3 . XOR : ^  -> Both input are different then only output 1

    int main()
    {
        int x = 3, y = 6;
        cout<< (x & y) <<endl;
        cout<< (x | y) << endl;
        cout<< (x ^ y) << endl;
        return 0;
    }


    4 . Left Shift Operator  : <<   -> 
    5 . Right Shift Operator : >>   ->
    6 . Bitwise Not  operator : ~   -> 



# Letf Shift Operator

       x      : 0000......011
    (x << 1)  : 0000......110
    (x << 2)  : 0000......1100


    int main()
    {
        int x = 3;
        cout << (x << 1) << endl;
        cout << (x << 2) << endl;
        int y = 4;
        int z = (x << y);
        cout<< z;
        return 0;
    }

    ##    x << y   --->  x * 2^y  


# Right Shift operator


        x     : 0000......0100001
    (x >> 1)  : 0000......0010000
    (x >> 2)  : 0000......0001000


    int main()
    {
        int x = 33;
        cout << (x >> 1) << endl;
        cout << (x >> 2) << endl;
        int y = 4;
        int z = (x >> y);
        cout<< z;
        return 0;
    }

    ##   x >> y   ----->   floor(x / 2^y)


# Bitwise not operator

    x = 1
    x : 00........01
   ~x : 11........10
   
    int main()
    {
        unsigned int x = 1;
        cout<< (~x) <<endl;
        x = 5;
        cout << (~x) <<endl;
        return 0;
    }

    * If 32 bit representation then 
      minimum number that can be represented is 0,
      maximum number that can be represented is 2^31  - 1.

      so if unsigned int is given then it's negation wil be 2^31 -1 - number.


    ## For signed number 